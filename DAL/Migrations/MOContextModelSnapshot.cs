// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(MOContext))]
    partial class MOContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.AddBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CvvbankCard")
                        .HasColumnType("int")
                        .HasColumnName("CVVBankCard");

                    b.Property<DateTime>("DateAddBalance")
                        .HasColumnType("date")
                        .HasColumnName("dateAddBalance");

                    b.Property<DateTime>("DateBankCard")
                        .HasColumnType("date")
                        .HasColumnName("dateBankCard");

                    b.Property<string>("IdClient")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idClient");

                    b.Property<string>("NameBankCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nameBankCard");

                    b.Property<string>("NumberBankCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("numberBankCard");

                    b.Property<string>("PhoneNumberForAddBalance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phoneNumberForAddBalance");

                    b.Property<int>("SumForAdd")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("AddBalance");
                });

            modelBuilder.Entity("DAL.Models.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CallType")
                        .HasColumnType("int")
                        .HasColumnName("callType");

                    b.Property<decimal>("CostCall")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("costCall");

                    b.Property<DateTime>("DateCall")
                        .HasColumnType("date")
                        .HasColumnName("dateCall");

                    b.Property<string>("IdClient")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idClient");

                    b.Property<bool>("IncomingCall")
                        .HasColumnType("bit")
                        .HasColumnName("incomingCall");

                    b.Property<string>("NumberWasCall")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("numberWasCall");

                    b.Property<int>("TimeTalk")
                        .HasColumnType("int")
                        .HasColumnName("timeTalk");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("Call");
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("balance");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateConnect")
                        .HasColumnType("date")
                        .HasColumnName("dateConnect");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<float>("FreeGb")
                        .HasColumnType("real")
                        .HasColumnName("freeGB");

                    b.Property<int>("FreeMin")
                        .HasColumnType("int")
                        .HasColumnName("freeMin");

                    b.Property<int>("FreeSms")
                        .HasColumnType("int")
                        .HasColumnName("freeSms");

                    b.Property<bool>("IsPhysCl")
                        .HasColumnType("bit")
                        .HasColumnName("isPhysCl");

                    b.Property<string>("Itn")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ITN")
                        .IsFixedLength(true);

                    b.Property<string>("LegalAdress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("legalAdress");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("name")
                        .IsFixedLength(true);

                    b.Property<string>("NameOrganization")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nameOrganization");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NumberPassport")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("numberPassport")
                        .IsFixedLength(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("password")
                        .IsFixedLength(true);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<string>("SurName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("surName")
                        .IsFixedLength(true);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Models.ConnectService", b =>
                {
                    b.Property<int>("IdConnectServ")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idConnectServ")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateConnectBegin")
                        .HasColumnType("date")
                        .HasColumnName("dateConnectBegin");

                    b.Property<DateTime?>("DateConnectEnd")
                        .HasColumnType("date")
                        .HasColumnName("dateConnectEnd");

                    b.Property<string>("IdClient")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idClient");

                    b.Property<int>("IdExtraService")
                        .HasColumnType("int")
                        .HasColumnName("idExtraService");

                    b.HasKey("IdConnectServ");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdExtraService");

                    b.ToTable("ConnectService");
                });

            modelBuilder.Entity("DAL.Models.ConnectTariff", b =>
                {
                    b.Property<int>("IdConnectTariff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idConnectTariff")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateConnectTariffBegin")
                        .HasColumnType("date")
                        .HasColumnName("dateConnectTariffBegin");

                    b.Property<DateTime?>("DateConnectTariffEnd")
                        .HasColumnType("date")
                        .HasColumnName("dateConnectTariffEnd");

                    b.Property<string>("IdClient")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idClient");

                    b.Property<int>("IdTariffPlan")
                        .HasColumnType("int")
                        .HasColumnName("idTariffPlan");

                    b.HasKey("IdConnectTariff");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdTariffPlan");

                    b.ToTable("ConnectTariff");
                });

            modelBuilder.Entity("DAL.Models.ExtraService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanConnectThisSer")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("SubscFee")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("subscFee");

                    b.HasKey("Id");

                    b.ToTable("ExtraService");
                });

            modelBuilder.Entity("DAL.Models.Sm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostSms")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("costSMS");

                    b.Property<DateTime>("DateSms")
                        .HasColumnType("date")
                        .HasColumnName("dateSms");

                    b.Property<string>("IdClient")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("idClient");

                    b.Property<bool>("IncomingSms")
                        .HasColumnType("bit")
                        .HasColumnName("incomingSms");

                    b.Property<string>("RecipientSms")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("recipientSms");

                    b.Property<string>("TextSms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("textSms");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("DAL.Models.TariffPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanConnectThisTar")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostChangeTar")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("costChangeTar");

                    b.Property<decimal>("CostOneMinCallCity")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("costOneMinCallCity");

                    b.Property<decimal>("CostOneMinCallInternation")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("CostOneMinCallOutCity")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("costOneMinCallOutCity");

                    b.Property<decimal>("CostSms")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("costSms");

                    b.Property<int>("FreeMinuteForMonth")
                        .HasColumnType("int")
                        .HasColumnName("freeMinuteForMonth");

                    b.Property<float>("IntGb")
                        .HasColumnType("real")
                        .HasColumnName("intGB");

                    b.Property<bool>("IsPhysTar")
                        .HasColumnType("bit")
                        .HasColumnName("isPhysTar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("Sms")
                        .HasColumnType("int")
                        .HasColumnName("SMS");

                    b.Property<int>("SubcriptionFee")
                        .HasColumnType("int")
                        .HasColumnName("subcriptionFee");

                    b.HasKey("Id");

                    b.ToTable("TariffPlan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Models.AddBalance", b =>
                {
                    b.HasOne("DAL.Models.Client", "IdClientNavigation")
                        .WithMany("AddBalances")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK_AddBalance_Client");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("DAL.Models.Call", b =>
                {
                    b.HasOne("DAL.Models.Client", "IdClientNavigation")
                        .WithMany("Calls")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK_Call_Client");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("DAL.Models.ConnectService", b =>
                {
                    b.HasOne("DAL.Models.Client", "IdClientNavigation")
                        .WithMany("ConnectServices")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK_ConnectService_Client");

                    b.HasOne("DAL.Models.ExtraService", "IdExtraServiceNavigation")
                        .WithMany("ConnectServices")
                        .HasForeignKey("IdExtraService")
                        .HasConstraintName("FK_ConnectService_ExtraService")
                        .IsRequired();

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdExtraServiceNavigation");
                });

            modelBuilder.Entity("DAL.Models.ConnectTariff", b =>
                {
                    b.HasOne("DAL.Models.Client", "IdClientNavigation")
                        .WithMany("ConnectTariffs")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK_ConnectTariff_Client");

                    b.HasOne("DAL.Models.TariffPlan", "IdTariffPlanNavigation")
                        .WithMany("ConnectTariffs")
                        .HasForeignKey("IdTariffPlan")
                        .HasConstraintName("FK_ConnectTariff_TariffPlan")
                        .IsRequired();

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdTariffPlanNavigation");
                });

            modelBuilder.Entity("DAL.Models.Sm", b =>
                {
                    b.HasOne("DAL.Models.Client", "IdClientNavigation")
                        .WithMany("Sms")
                        .HasForeignKey("IdClient")
                        .HasConstraintName("FK_Sms_Client");

                    b.Navigation("IdClientNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Client", b =>
                {
                    b.Navigation("AddBalances");

                    b.Navigation("Calls");

                    b.Navigation("ConnectServices");

                    b.Navigation("ConnectTariffs");

                    b.Navigation("Sms");
                });

            modelBuilder.Entity("DAL.Models.ExtraService", b =>
                {
                    b.Navigation("ConnectServices");
                });

            modelBuilder.Entity("DAL.Models.TariffPlan", b =>
                {
                    b.Navigation("ConnectTariffs");
                });
#pragma warning restore 612, 618
        }
    }
}
